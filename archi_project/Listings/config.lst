


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    8 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
    9 00000000         
   10 00000000         ; The GPIODATA register is the data register
   11 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   12 00000000         
   13 00000000         ; The GPIODATA register is the data register
   14 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   15 00000000         
   16 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000
   17 00000000         
   18 00000000         ; configure the corresponding pin to be an output
   19 00000000         ; all GPIO pins are inputs by default
   20 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   21 00000000         
   22 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   23 00000000         ; By default, all GPIO pins have 2-mA drive.
   24 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   25 00000000         
   26 00000000         ; Digital enable register
   27 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   28 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab



ARM Macro Assembler    Page 2 


                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   29 00000000         
   30 00000000         ; Pul_up -> impulsion
   31 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   32 00000000         
   33 00000000         ; Broches select
   34 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   35 00000000         
   36 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   37 00000000         
   38 00000000 00000001 
                       BROCHE0 EQU              0x01        ;Bumper_gauhce
   39 00000000 00000002 
                       BROCHE1 EQU              0x02        ;Bumper_droit
   40 00000000 00000003 
                       BROCHE0_1
                               EQU              0x03        ;Les deux bumpers
   41 00000000 40028000 
                       PWM_BASE
                               EQU              0x040028000 ;BASE des Block PWM
                                                             p.1138
   42 00000000 40028058 
                       PWM0CMPA
                               EQU              PWM_BASE+0x058
   43 00000000 40028098 
                       PWM1CMPA
                               EQU              PWM_BASE+0x098
   44 00000000         
   45 00000000         
   46 00000000         
   47 00000000         ; blinking frequency
   48 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   49 00000000                 ENTRY
   50 00000000                 EXPORT           __main
   51 00000000         
   52 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   53 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   54 00000000         
   55 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   56 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   57 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant



ARM Macro Assembler    Page 3 


   58 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   59 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   60 00000000         
   61 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   62 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   63 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   64 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   65 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   66 00000000         
   67 00000000         
   68 00000000         __main
   69 00000000         
   70 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   71 00000000         ; ;;         
   72 00000000 4E49            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   73 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b101
                                                            000)
   74 00000006         ; ;;                              (GPIO::FEDCBA)
   75 00000006 6030            str              r0, [r6]    ; ajout le périphér
                                                            ique GPIO dans la c
                                                            lock
   76 00000008         
   77 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   78 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   79 0000000A BF00            nop
   80 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   81 0000000E         
   82 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED
   83 0000000E         
   84 0000000E 4E47            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   85 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   86 00000014 6030            str              r0, [r6]
   87 00000016         
   88 00000016 4E46            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE



ARM Macro Assembler    Page 4 


N 
                                                            ;; Enable Digital F
                                                            unction 
   89 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   90 0000001C 6030            str              r0, [r6]
   91 0000001E         
   92 0000001E 4E45            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   93 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   94 00000024 6030            str              r0, [r6]
   95 00000026         
   96 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   97 0000002A         
   98 0000002A         ; allumer la led broche 4 (BROCHE4_5)
   99 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
  100 0000002E         
  101 0000002E 4E42            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  102 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
  103 00000030         
  104 00000030         
  105 00000030         
  106 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  107 00000030         
  108 00000030 4F42            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  109 00000032 F04F 0040       ldr              r0, = BROCHE6
  110 00000036 6038            str              r0, [r7]
  111 00000038         
  112 00000038 4F41            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  113 0000003A F04F 0040       ldr              r0, = BROCHE6
  114 0000003E 6038            str              r0, [r7]
  115 00000040         
  116 00000040 4F40            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2)
  117 00000042         
  118 00000042         
  119 00000042         
  120 00000042 F8DF 8104       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  121 00000046 F04F 0003       ldr              r0, = BROCHE0_1
  122 0000004A F8C8 0000       str              r0, [r8]
  123 0000004E         
  124 0000004E F8DF 80FC       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 



ARM Macro Assembler    Page 5 


                                                            ;; Enable Digital F
                                                            unction 
  125 00000052 F04F 0003       ldr              r0, = BROCHE0_1
  126 00000056 F8C8 0000       str              r0, [r8]
  127 0000005A         
  128 0000005A         
  129 0000005A         
  130 0000005A         ; Configure les PWM + GPIO
  131 0000005A F7FF FFFE       BL               MOTEUR_INIT
  132 0000005E         ;; BL Branchement vers un lien (sous programme)
  133 0000005E 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  134 00000060 6033            str              r3, [r6]
  135 00000062         
  136 00000062         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  137 00000062         
  138 00000062         
  139 00000062         switch1
  140 00000062         
  141 00000062 F8D7 C000       ldr              r12, [r7]
  142 00000066 F1BC 0F00       CMP              r12,#0x00
  143 0000006A D1FA            BNE              switch1
  144 0000006C         
  145 0000006C         ; Activer les deux moteurs droit et gauche
  146 0000006C F7FF FFFE       BL               MOTEUR_DROIT_ON
  147 00000070 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  148 00000074 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  149 00000078 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  150 0000007C         
  151 0000007C         ; Avancement pendant une période (deux WAIT)
  152 0000007C F000 F80D       BL               WAIT        ; BL (Branchement v
                                                            ers le lien WAIT); 
                                                            possibilité de reto
                                                            ur à la suite avec 
                                                            (BX LR)
  153 00000080 F000 F80B       BL               WAIT
  154 00000084         
  155 00000084         
  156 00000084         clignotement
  157 00000084         
  158 00000084 4E2C            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  159 00000086 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      
  160 00000088 4931            ldr              r1, = DUREE
  161 0000008A         wait1
  162 0000008A 3901            subs             r1, #1
  163 0000008C D1FD            bne              wait1
  164 0000008E 4E2A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  165 00000090 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  166 00000092 492F            ldr              r1, = DUREE
  167 00000094         ;; Boucle d'attente
  168 00000094 3901    wait2   subs             r1,#1
  169 00000096 D1FD            bne              wait2
  170 00000098         



ARM Macro Assembler    Page 6 


  171 00000098 E7F4            b                clignotement
  172 0000009A 492E    WAIT    ldr              r1, =0xAFFFFF
  173 0000009C         ;; pour la duree de la boucle d'attente2 (wait2)
  174 0000009C         ROTATION
  175 0000009C         ;Au moment de faire les rotations, pour pouvoir écouter 
                       les autres ports, à chaque fois qu'on rentre dans le wai
                       t faires clignoter les leds
  176 0000009C         ; peut être mettre un compteur dans cette boucle pour ne
                        pas activer les leds a chaque fois et faire une crise d
                       'épilepsie 
  177 0000009C         bump_gauche
  178 0000009C F8DF 80B8       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
0<<2)
  179 000000A0 F8D8 E000       ldr              r14, [r8]
  180 000000A4 F1BE 0F00       CMP              r14,#0x00
  181 000000A8 D100            BNE              bump_droit
  182 000000AA E007            b                init_gauche
  183 000000AC         
  184 000000AC         bump_droit
  185 000000AC F8DF 80AC       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
1<<2) 
                                                            ;bumper droit
  186 000000B0 F8D8 E000       ldr              r14, [r8]
  187 000000B4 F1BE 0F00       CMP              r14, #0x00
  188 000000B8 D1F0            BNE              bump_gauche
  189 000000BA E017            b                init_droit
  190 000000BC         init_gauche
  191 000000BC 4E28            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  192 000000BE F44F 70C0       mov              r0, #0x180  ; vitesse de la rou
                                                            e droite
  193 000000C2 6030            str              r0, [r6]
  194 000000C4 F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;fait tourne
                                                            r une roue dans l'a
                                                            utre sens moins vit
                                                            e pour tourner
  195 000000C8 4E1B            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  196 000000CA 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00 
  197 000000CC 4E25            ldr              r6, = GPIO_PORTF_BASE + (0x10<<
2)
  198 000000CE 6033            str              r3, [r6]
  199 000000D0 F000 F824       BL               TEMP
  200 000000D4         
  201 000000D4         rotation_gauche
  202 000000D4 4E22            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  203 000000D6 F04F 0050       mov              r0, #0x50
  204 000000DA 6030            str              r0, [r6]
  205 000000DC F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  206 000000E0 4E15            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  207 000000E2 6033            str              r3, [r6]    ;; Eteint LED car r
                                                            2 = 0x00



ARM Macro Assembler    Page 7 


  208 000000E4 F1BE 0F00       CMP              r14,#0x00
  209 000000E8 D1D8            BNE              bump_gauche
  210 000000EA E7F3            b                rotation_gauche
  211 000000EC         
  212 000000EC         init_droit
  213 000000EC 4E1E            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  214 000000EE F44F 70C0       mov              r0, #0x180  ; vitesse de la rou
                                                            e droite
  215 000000F2 6030            str              r0, [r6]
  216 000000F4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;fait tourn
                                                            er une roue dans l'
                                                            autre sens moins vi
                                                            te pour tourner
  217 000000F8 4E0F            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  218 000000FA 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00 
  219 000000FC 4E1B            ldr              r6, = GPIO_PORTF_BASE + (0x20<<
2)
  220 000000FE 6033            str              r3, [r6]
  221 00000100 F000 F80C       BL               TEMP
  222 00000104         
  223 00000104         rotation_droite
  224 00000104 4E18            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  225 00000106 F04F 0050       mov              r0, #0x50
  226 0000010A 6030            str              r0, [r6]
  227 0000010C F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  228 00000110 4E09            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  229 00000112 6033            str              r3, [r6]
  230 00000114 F1BE 0F00       CMP              r14,#0x00
  231 00000118 D1C8            BNE              bump_droit
  232 0000011A E7F3            b                rotation_droite
  233 0000011C         
  234 0000011C 4914    TEMP    ldr              r1, =0xEFFFF
  235 0000011E 3901    wait6   subs             r1, #1
  236 00000120 D1FD            bne              wait6
  237 00000122 D1BB            bne              ROTATION
  238 00000124         ;; retour à la suite d u lien de branchement
  239 00000124 4770            BX               LR
  240 00000126 BF00            NOP
  241 00000128                 END
              400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              40007510 
              4000751C 
              40007100 
              40024510 
              4002451C 
              002FFFFF 



ARM Macro Assembler    Page 8 


              00AFFFFF 
              40024004 
              40024008 
              40028058 
              40025040 
              40028098 
              40025080 
              000EFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\config.d -o.\objects\config.o -I.\RTE\_Target_1 -IC:\Use
rs\audri\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\
audri\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\Device\ARM\ARMCM3\Include --prede
fine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VER
SION SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\
listings\config.lst config.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file config.s
   Uses
      None
Comment: .text unused
ROTATION 0000009C

Symbol: ROTATION
   Definitions
      At line 174 in file config.s
   Uses
      At line 237 in file config.s
Comment: ROTATION used once
TEMP 0000011C

Symbol: TEMP
   Definitions
      At line 234 in file config.s
   Uses
      At line 199 in file config.s
      At line 221 in file config.s

WAIT 0000009A

Symbol: WAIT
   Definitions
      At line 172 in file config.s
   Uses
      At line 152 in file config.s
      At line 153 in file config.s

__main 00000000

Symbol: __main
   Definitions
      At line 68 in file config.s
   Uses
      At line 50 in file config.s
Comment: __main used once
bump_droit 000000AC

Symbol: bump_droit
   Definitions
      At line 184 in file config.s
   Uses
      At line 181 in file config.s
      At line 231 in file config.s

bump_gauche 0000009C

Symbol: bump_gauche
   Definitions
      At line 177 in file config.s
   Uses
      At line 188 in file config.s
      At line 209 in file config.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


clignotement 00000084

Symbol: clignotement
   Definitions
      At line 156 in file config.s
   Uses
      At line 171 in file config.s
Comment: clignotement used once
init_droit 000000EC

Symbol: init_droit
   Definitions
      At line 212 in file config.s
   Uses
      At line 189 in file config.s
Comment: init_droit used once
init_gauche 000000BC

Symbol: init_gauche
   Definitions
      At line 190 in file config.s
   Uses
      At line 182 in file config.s
Comment: init_gauche used once
rotation_droite 00000104

Symbol: rotation_droite
   Definitions
      At line 223 in file config.s
   Uses
      At line 232 in file config.s
Comment: rotation_droite used once
rotation_gauche 000000D4

Symbol: rotation_gauche
   Definitions
      At line 201 in file config.s
   Uses
      At line 210 in file config.s
Comment: rotation_gauche used once
switch1 00000062

Symbol: switch1
   Definitions
      At line 139 in file config.s
   Uses
      At line 143 in file config.s
Comment: switch1 used once
wait1 0000008A

Symbol: wait1
   Definitions
      At line 161 in file config.s
   Uses
      At line 163 in file config.s
Comment: wait1 used once
wait2 00000094




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: wait2
   Definitions
      At line 168 in file config.s
   Uses
      At line 169 in file config.s
Comment: wait2 used once
wait6 0000011E

Symbol: wait6
   Definitions
      At line 235 in file config.s
   Uses
      At line 236 in file config.s
Comment: wait6 used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 38 in file config.s
   Uses
      At line 178 in file config.s
Comment: BROCHE0 used once
BROCHE0_1 00000003

Symbol: BROCHE0_1
   Definitions
      At line 40 in file config.s
   Uses
      At line 121 in file config.s
      At line 125 in file config.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 39 in file config.s
   Uses
      At line 185 in file config.s
Comment: BROCHE1 used once
BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 34 in file config.s
   Uses
      At line 85 in file config.s
      At line 89 in file config.s
      At line 93 in file config.s
      At line 99 in file config.s
      At line 101 in file config.s
      At line 133 in file config.s
      At line 158 in file config.s
      At line 164 in file config.s
      At line 195 in file config.s
      At line 206 in file config.s
      At line 217 in file config.s
      At line 228 in file config.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 36 in file config.s
   Uses
      At line 109 in file config.s
      At line 113 in file config.s
      At line 116 in file config.s

DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 48 in file config.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 160 in file config.s
      At line 166 in file config.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 31 in file config.s
   Uses
      At line 108 in file config.s
      At line 120 in file config.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 28 in file config.s
   Uses
      At line 88 in file config.s
      At line 112 in file config.s
      At line 124 in file config.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 20 in file config.s
   Uses
      At line 84 in file config.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 24 in file config.s
   Uses
      At line 92 in file config.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 14 in file config.s
   Uses
      At line 108 in file config.s
      At line 112 in file config.s
      At line 116 in file config.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 16 in file config.s
   Uses
      At line 120 in file config.s
      At line 124 in file config.s
      At line 178 in file config.s
      At line 185 in file config.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 11 in file config.s
   Uses
      At line 84 in file config.s
      At line 88 in file config.s
      At line 92 in file config.s
      At line 101 in file config.s
      At line 133 in file config.s
      At line 158 in file config.s
      At line 164 in file config.s
      At line 195 in file config.s
      At line 197 in file config.s
      At line 206 in file config.s
      At line 217 in file config.s
      At line 219 in file config.s
      At line 228 in file config.s

PWM0CMPA 40028058

Symbol: PWM0CMPA
   Definitions
      At line 42 in file config.s
   Uses
      At line 191 in file config.s
      At line 202 in file config.s

PWM1CMPA 40028098

Symbol: PWM1CMPA
   Definitions
      At line 43 in file config.s
   Uses
      At line 213 in file config.s
      At line 224 in file config.s

PWM_BASE 40028000

Symbol: PWM_BASE
   Definitions
      At line 41 in file config.s
   Uses
      At line 42 in file config.s
      At line 43 in file config.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 8 in file config.s
   Uses
      At line 72 in file config.s
Comment: SYSCTL_PERIPH_GPIO used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 58 in file config.s
   Uses
      At line 148 in file config.s
      At line 205 in file config.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 57 in file config.s
   Uses
      At line 194 in file config.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 59 in file config.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 56 in file config.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 55 in file config.s
   Uses
      At line 146 in file config.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 64 in file config.s
   Uses
      At line 149 in file config.s
      At line 227 in file config.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 63 in file config.s
   Uses
      At line 216 in file config.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 65 in file config.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 62 in file config.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 61 in file config.s
   Uses
      At line 147 in file config.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 53 in file config.s
   Uses
      At line 131 in file config.s
Comment: MOTEUR_INIT used once
11 symbols
381 symbols in table
