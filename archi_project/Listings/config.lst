


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    4 00000000         
    5 00000000         
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         ; The GPIODATA register is the data register
   12 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   13 00000000         
   14 00000000         ; The GPIODATA register is the data register
   15 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   16 00000000         
   17 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000
   18 00000000         
   19 00000000         ; configure the corresponding pin to be an output
   20 00000000         ; all GPIO pins are inputs by default
   21 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   22 00000000         
   23 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   24 00000000         ; By default, all GPIO pins have 2-mA drive.
   25 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   26 00000000         
   27 00000000         ; Digital enable register
   28 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   29 00000000 0000051C 
                       GPIO_O_DEN



ARM Macro Assembler    Page 2 


                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   30 00000000         
   31 00000000         ; Pul_up -> impulsion
   32 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   33 00000000         
   34 00000000         ; Broches select
   35 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   36 00000000         
   37 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   38 00000000         
   39 00000000 00000001 
                       BROCHE0 EQU              0x01        ;Bumper
   40 00000000         
   41 00000000 00000002 
                       BROCHE1 EQU              0x02        ;Bumper
   42 00000000         
   43 00000000         ; blinking frequency
   44 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   45 00000000                 ENTRY
   46 00000000                 EXPORT           __main
   47 00000000         
   48 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   49 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   50 00000000         
   51 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   52 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   53 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   54 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   55 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   56 00000000         
   57 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   58 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   59 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'



ARM Macro Assembler    Page 3 


                                                            avant
   60 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   61 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   62 00000000         
   63 00000000         
   64 00000000         __main
   65 00000000         
   66 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   67 00000000         ; ;;         
   68 00000000 4E32            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   69 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b101
                                                            000)
   70 00000006         ; ;;                              (GPIO::FEDCBA)
   71 00000006 6030            str              r0, [r6]    ; ajout le périphér
                                                            ique GPIO dans la c
                                                            lock
   72 00000008         
   73 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   74 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   75 0000000A BF00            nop
   76 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   77 0000000E         
   78 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED
   79 0000000E         
   80 0000000E 4E30            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   81 00000010 F04F 0030       ldr              r0, = BROCHE4_5
   82 00000014 6030            str              r0, [r6]
   83 00000016         
   84 00000016 4E2F            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   85 00000018 F04F 0030       ldr              r0, = BROCHE4_5
   86 0000001C 6030            str              r0, [r6]
   87 0000001E         
   88 0000001E 4E2E            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
   89 00000020 F04F 0030       ldr              r0, = BROCHE4_5
   90 00000024 6030            str              r0, [r6]



ARM Macro Assembler    Page 4 


   91 00000026         
   92 00000026 F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
   93 0000002A         
   94 0000002A         ; allumer la led broche 4 (BROCHE4_5)
   95 0000002A F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000
   96 0000002E         
   97 0000002E 4E2B            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
   98 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration LED 
   99 00000030         
  100 00000030         
  101 00000030         
  102 00000030         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  103 00000030         
  104 00000030 4F2B            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  105 00000032 F04F 0040       ldr              r0, = BROCHE6
  106 00000036 6038            str              r0, [r7]
  107 00000038         
  108 00000038 4F2A            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  109 0000003A F04F 0040       ldr              r0, = BROCHE6
  110 0000003E 6038            str              r0, [r7]
  111 00000040         
  112 00000040 4F29            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  113 00000042         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  114 00000042         
  115 00000042         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Bumper droi
                       t
  116 00000042 F8DF 80A8       ldr              r8, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  117 00000046 F04F 0002       ldr              r0, = BROCHE1
  118 0000004A F8C8 0000       str              r0, [r8]
  119 0000004E         
  120 0000004E F8DF 80A0       ldr              r8, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  121 00000052 F04F 0002       ldr              r0, = BROCHE1
  122 00000056 F8C8 0000       str              r0, [r8]
  123 0000005A         
  124 0000005A F8DF 8098       ldr              r8, = GPIO_PORTE_BASE + (BROCHE
1<<2)
  125 0000005E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher
  126 0000005E         



ARM Macro Assembler    Page 5 


  127 0000005E         ; Configure les PWM + GPIO
  128 0000005E F7FF FFFE       BL               MOTEUR_INIT
  129 00000062         ;; BL Branchement vers un lien (sous programme)
  130 00000062 4E1E            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  131 00000064 6033            str              r3, [r6]
  132 00000066         leto
  133 00000066         
  134 00000066 F8D7 C000       ldr              r12, [r7]
  135 0000006A F1BC 0F00       CMP              r12,#0x00   ; tant que le bouto
                                                            n est éteint, on bo
                                                            ucle
  136 0000006E D1FA            BNE              leto
  137 00000070         
  138 00000070         ;ReadState
  139 00000070         
  140 00000070         ;ldr r10,[r7]
  141 00000070         ;CMP r10,#0x00
  142 00000070         ;BNE ReadState      
  143 00000070         
  144 00000070         ; Activer les deux moteurs droit et gauche
  145 00000070 F7FF FFFE       BL               MOTEUR_DROIT_ON
  146 00000074 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  147 00000078         
  148 00000078         ; Evalbot avance droit devant
  149 00000078 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  150 0000007C F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  151 00000080         
  152 00000080         ; Avancement pendant une période (deux WAIT)
  153 00000080 F000 F80D       BL               WAIT        ; BL (Branchement v
                                                            ers le lien WAIT); 
                                                            possibilité de reto
                                                            ur à la suite avec 
                                                            (BX LR)
  154 00000084 F000 F80B       BL               WAIT
  155 00000088         
  156 00000088         
  157 00000088         ;virage_droite
  158 00000088         
  159 00000088         ; Rotation à droite de l'Evalbot pendant une demi-périod
                       e (1 seul WAIT)
  160 00000088         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  161 00000088         ;BL WAIT
  162 00000088         ;  ldr r13, [r8]
  163 00000088         ;  CMP r13,#0x00 ; tant que le switch droit est éteint, 
                       on boucle
  164 00000088         ;  BNE virage_droite
  165 00000088         
  166 00000088         ; Rotation à droite de l'Evalbot pendant une demi-périod
                       e (1 seul WAIT)
  167 00000088         ;  BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  168 00000088         ;  BL WAIT
  169 00000088         
  170 00000088         
  171 00000088         clignotement
  172 00000088 4E14            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  173 0000008A 6032            str              r2, [r6]    ;; Eteint LED car r
                                                            2 = 0x00      



ARM Macro Assembler    Page 6 


  174 0000008C 491A            ldr              r1, = DUREE
  175 0000008E         wait1
  176 0000008E 3901            subs             r1, #1
  177 00000090 D1FD            bne              wait1
  178 00000092 4E12            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2)
  179 00000094 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  180 00000096 4918            ldr              r1, = DUREE
  181 00000098         ;; Boucle d'attante
  182 00000098 3901    wait2   subs             r1,#1
  183 0000009A D1FD            bne              wait2
  184 0000009C         
  185 0000009C E7F4            b                clignotement
  186 0000009E 4917    WAIT    ldr              r1, =0xAFFFFF
  187 000000A0         ;; pour la duree de la boucle d'attente2 (wait2)
  188 000000A0         wait13
  189 000000A0         ;Au moment de faire les rotations, pour pouvoir écouter 
                       les autres ports, à chaque fois qu'on rentre dans le wai
                       t faires clignoter les leds
  190 000000A0         ; peut êtee mettre un compteur dans cette boucle pour ne
                        pas activer les leds a chaque fois et faire une crise d
                       'épilepsie 
  191 000000A0         
  192 000000A0         bump_droit_inactif
  193 000000A0         
  194 000000A0 F8D8 E000       ldr              r14, [r8]
  195 000000A4 F1BE 0F00       CMP              r14,#0x00
  196 000000A8 D1FA            BNE              bump_droit_inactif
  197 000000AA         loop2
  198 000000AA F7FF FFFE       BL               MOTEUR_DROIT_ON
  199 000000AE F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  200 000000B2 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  201 000000B6 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  202 000000BA F7FF FFF0       BL               WAIT
  203 000000BE F7FF FFEE       BL               WAIT
  204 000000C2 E7F2            b                loop2
  205 000000C4 3901            subs             r1, #1
  206 000000C6 D1EB            bne              wait13
  207 000000C8         ;; retour à la suite du lien de branchement
  208 000000C8 4770            BX               LR
  209 000000CA         
  210 000000CA         
  211 000000CA BF00            NOP
  212 000000CC                 END
              400FE108 
              40025400 
              4002551C 
              40025500 
              400250C0 
              40007510 
              4000751C 
              40007100 
              40024510 
              4002451C 
              40024008 
              002FFFFF 



ARM Macro Assembler    Page 7 


              00AFFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\config.d -o.\objects\config.o -I.\RTE\_Target_1 -IC:\Use
rs\audri\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\
audri\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\Device\ARM\ARMCM3\Include --prede
fine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VER
SION SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\
listings\config.lst config.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file config.s
   Uses
      None
Comment: .text unused
WAIT 0000009E

Symbol: WAIT
   Definitions
      At line 186 in file config.s
   Uses
      At line 153 in file config.s
      At line 154 in file config.s
      At line 202 in file config.s
      At line 203 in file config.s

__main 00000000

Symbol: __main
   Definitions
      At line 64 in file config.s
   Uses
      At line 46 in file config.s
Comment: __main used once
bump_droit_inactif 000000A0

Symbol: bump_droit_inactif
   Definitions
      At line 192 in file config.s
   Uses
      At line 196 in file config.s
Comment: bump_droit_inactif used once
clignotement 00000088

Symbol: clignotement
   Definitions
      At line 171 in file config.s
   Uses
      At line 185 in file config.s
Comment: clignotement used once
leto 00000066

Symbol: leto
   Definitions
      At line 132 in file config.s
   Uses
      At line 136 in file config.s
Comment: leto used once
loop2 000000AA

Symbol: loop2
   Definitions
      At line 197 in file config.s
   Uses
      At line 204 in file config.s
Comment: loop2 used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

wait1 0000008E

Symbol: wait1
   Definitions
      At line 175 in file config.s
   Uses
      At line 177 in file config.s
Comment: wait1 used once
wait13 000000A0

Symbol: wait13
   Definitions
      At line 188 in file config.s
   Uses
      At line 206 in file config.s
Comment: wait13 used once
wait2 00000098

Symbol: wait2
   Definitions
      At line 182 in file config.s
   Uses
      At line 183 in file config.s
Comment: wait2 used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 39 in file config.s
   Uses
      None
Comment: BROCHE0 unused
BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 41 in file config.s
   Uses
      At line 117 in file config.s
      At line 121 in file config.s
      At line 124 in file config.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 35 in file config.s
   Uses
      At line 81 in file config.s
      At line 85 in file config.s
      At line 89 in file config.s
      At line 95 in file config.s
      At line 97 in file config.s
      At line 130 in file config.s
      At line 172 in file config.s
      At line 178 in file config.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 37 in file config.s
   Uses
      At line 105 in file config.s
      At line 109 in file config.s
      At line 112 in file config.s

DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 44 in file config.s
   Uses
      At line 174 in file config.s
      At line 180 in file config.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 32 in file config.s
   Uses
      At line 104 in file config.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 116 in file config.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 29 in file config.s
   Uses
      At line 84 in file config.s
      At line 108 in file config.s
      At line 120 in file config.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 21 in file config.s
   Uses
      At line 80 in file config.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 25 in file config.s
   Uses
      At line 88 in file config.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 15 in file config.s
   Uses
      At line 104 in file config.s
      At line 108 in file config.s
      At line 112 in file config.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 17 in file config.s
   Uses
      At line 116 in file config.s
      At line 120 in file config.s
      At line 124 in file config.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 12 in file config.s
   Uses
      At line 80 in file config.s
      At line 84 in file config.s
      At line 88 in file config.s
      At line 97 in file config.s
      At line 130 in file config.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 172 in file config.s
      At line 178 in file config.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file config.s
   Uses
      At line 68 in file config.s
Comment: SYSCTL_PERIPH_GPIO used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 54 in file config.s
   Uses
      At line 149 in file config.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 53 in file config.s
   Uses
      At line 200 in file config.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 55 in file config.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 52 in file config.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 51 in file config.s
   Uses
      At line 145 in file config.s
      At line 198 in file config.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 60 in file config.s
   Uses
      At line 150 in file config.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 59 in file config.s
   Uses
      At line 201 in file config.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 61 in file config.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 58 in file config.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 57 in file config.s
   Uses
      At line 146 in file config.s
      At line 199 in file config.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 49 in file config.s
   Uses
      At line 128 in file config.s
Comment: MOTEUR_INIT used once
11 symbols
371 symbols in table
