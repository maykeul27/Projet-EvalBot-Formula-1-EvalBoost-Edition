


ARM Macro Assembler    Page 1 


    1 00000000         ;; stellar est le fichier de déclaration des pins pour u
                       tiliser les périphériques
    2 00000000         
    3 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument); 
    4 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (configure les pwms + GPIO)
    5 00000000         
    6 00000000         ;Les pages se réfèrent au datasheet lm3s9b92.pdf
    7 00000000         
    8 00000000         ;Cablage :
    9 00000000         ;pin 10/PD0/PWM0 => input PWM du pont en H DRV8801RT
   10 00000000         ;pin 11/PD1/PWM1 => input Phase_R  du pont en H DRV8801R
                       T
   11 00000000         ;pin 12/PD2   => input SlowDecay commune aux 2 ponts en 
                       H
   12 00000000         ;pin 98/PD5   => input Enable 12v du conv DC/DC 
   13 00000000         ;pin 86/PH0/PWM2 => input PWM du 2nd pont en H
   14 00000000         ;pin 85/PH1/PWM3 => input Phase du 2nd pont en H 
   15 00000000         
   16 00000000         ;; Hexa corresponding values to pin numbers
   17 00000000 00000001 
                       GPIO_0  EQU              0x1
   18 00000000 00000002 
                       GPIO_1  EQU              0x2
   19 00000000 00000004 
                       GPIO_2  EQU              0x4
   20 00000000 00000020 
                       GPIO_5  EQU              0x20
   21 00000000         
   22 00000000         ;; pour enable clock    0x400FE000
   23 00000000 400FE100 
                       SYSCTL_RCGC0
                               EQU              0x400FE100  ;SYSCTL_RCGC0: offs
                                                            et 0x100 (p271 data
                                                            sheet de lm3s9b92.p
                                                            df)
   24 00000000 400FE108 
                       SYSCTL_RCGC2
                               EQU              0x400FE108  ;SYSCTL_RCGC2: offs
                                                            et 0x108 (p291 data
                                                            sheet de lm3s9b92.p
                                                            df)
   25 00000000         
   26 00000000         ;; General-Purpose Input/Outputs (GPIO) configuration
   27 00000000 40007000 
                       PORTD_BASE
                               EQU              0x40007000
   28 00000000 40007000 
                       GPIODATA_D
                               EQU              PORTD_BASE
   29 00000000 40007400 
                       GPIODIR_D
                               EQU              PORTD_BASE+0x00000400
   30 00000000 40007500 
                       GPIODR2R_D
                               EQU              PORTD_BASE+0x00000500
   31 00000000 4000751C 
                       GPIODEN_D
                               EQU              PORTD_BASE+0x0000051C



ARM Macro Assembler    Page 2 


   32 00000000 4000752C 
                       GPIOPCTL_D
                               EQU              PORTD_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   33 00000000 40007420 
                       GPIOAFSEL_D
                               EQU              PORTD_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   34 00000000         
   35 00000000 40027000 
                       PORTH_BASE
                               EQU              0x40027000
   36 00000000 40027000 
                       GPIODATA_H
                               EQU              PORTH_BASE
   37 00000000 40027400 
                       GPIODIR_H
                               EQU              PORTH_BASE+0x00000400
   38 00000000 40027500 
                       GPIODR2R_H
                               EQU              PORTH_BASE+0x00000500
   39 00000000 4002751C 
                       GPIODEN_H
                               EQU              PORTH_BASE+0x0000051C
   40 00000000 4002752C 
                       GPIOPCTL_H
                               EQU              PORTH_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   41 00000000 40027420 
                       GPIOAFSEL_H
                               EQU              PORTH_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   42 00000000         
   43 00000000         ;; Pulse Width Modulator (PWM) configuration
   44 00000000 40028000 
                       PWM_BASE
                               EQU              0x040028000 ;BASE des Block PWM
                                                             p.1138
   45 00000000 40028008 
                       PWMENABLE
                               EQU              PWM_BASE+0x008 ; p1145
   46 00000000         
   47 00000000         ;Block PWM0 pour sorties PWM0 et PWM1 (moteur 1)
   48 00000000 40028040 
                       PWM0CTL EQU              PWM_BASE+0x040 ;p1167
   49 00000000 40028050 
                       PWM0LOAD
                               EQU              PWM_BASE+0x050
   50 00000000 40028058 
                       PWM0CMPA
                               EQU              PWM_BASE+0x058



ARM Macro Assembler    Page 3 


   51 00000000 4002805C 
                       PWM0CMPB
                               EQU              PWM_BASE+0x05C
   52 00000000 40028060 
                       PWM0GENA
                               EQU              PWM_BASE+0x060
   53 00000000 40028064 
                       PWM0GENB
                               EQU              PWM_BASE+0x064
   54 00000000         
   55 00000000         ;Block PWM1 pour sorties PWM1 et PWM2 (moteur 2)
   56 00000000 40028080 
                       PWM1CTL EQU              PWM_BASE+0x080
   57 00000000 40028090 
                       PWM1LOAD
                               EQU              PWM_BASE+0x090
   58 00000000 40028098 
                       PWM1CMPA
                               EQU              PWM_BASE+0x098
   59 00000000 4002809C 
                       PWM1CMPB
                               EQU              PWM_BASE+0x09C
   60 00000000 400280A0 
                       PWM1GENA
                               EQU              PWM_BASE+0x0A0
   61 00000000 400280A4 
                       PWM1GENB
                               EQU              PWM_BASE+0x0A4
   62 00000000         
   63 00000000         
   64 00000000 00000050 
                       VITESSE EQU              0x50        ; Valeures plus pet
                                                            ites => Vitesse plu
                                                            s rapide exemple 0x
                                                            192
   65 00000000         ; Valeures plus grandes => Vitesse moins rapide exemple 
                       0x1B2
   66 00000000         
   67 00000000         
   68 00000000                 AREA             |.text|, CODE, READONLY
   69 00000000                 ENTRY
   70 00000000         
   71 00000000         ;; The EXPORT command specifies that a symbol can be acc
                       essed by other shared objects or executables.
   72 00000000                 EXPORT           MOTEUR_INIT
   73 00000000                 EXPORT           MOTEUR_DROIT_ON
   74 00000000                 EXPORT           MOTEUR_DROIT_OFF
   75 00000000                 EXPORT           MOTEUR_DROIT_AVANT
   76 00000000                 EXPORT           MOTEUR_DROIT_ARRIERE
   77 00000000                 EXPORT           MOTEUR_DROIT_INVERSE
   78 00000000                 EXPORT           MOTEUR_GAUCHE_ON
   79 00000000                 EXPORT           MOTEUR_GAUCHE_OFF
   80 00000000                 EXPORT           MOTEUR_GAUCHE_AVANT
   81 00000000                 EXPORT           MOTEUR_GAUCHE_ARRIERE
   82 00000000                 EXPORT           MOTEUR_GAUCHE_INVERSE
   83 00000000         
   84 00000000         
   85 00000000         MOTEUR_INIT
   86 00000000 4E5C            ldr              r6, = SYSCTL_RCGC0



ARM Macro Assembler    Page 4 


   87 00000002 6830            ldr              r0, [R6]
   88 00000004 F440 1080       ORR              r0, r0, #0x00100000 ;;bit 20 = 
                                                            PWM recoit clock: O
                                                            N (p271) 
   89 00000008 6030            str              r0, [r6]
   90 0000000A         
   91 0000000A         ;ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_1);PWM clock is pro
                       cessor clock /1
   92 0000000A         ;Je ne fais rien car par defaut = OK!!
   93 0000000A         ;*(int *) (0x400FE060)= *(int *)(0x400FE060)...;
   94 0000000A         
   95 0000000A         ;RCGC2 :  Enable port D GPIO(p291 ) car Moteur Droit sur
                        port D 
   96 0000000A 4E5B            ldr              r6, = SYSCTL_RCGC2
   97 0000000C 6830            ldr              r0, [R6]
   98 0000000E F040 0008       ORR              r0, r0, #0x08 ;; Enable port D 
                                                            GPIO 
   99 00000012 6030            str              r0, [r6]
  100 00000014         
  101 00000014         ;MOT2 : RCGC2 :  Enable port H GPIO  (2eme moteurs)
  102 00000014 4E58            ldr              r6, = SYSCTL_RCGC2
  103 00000016 6830            ldr              r0, [R6]
  104 00000018 F040 0080       ORR              r0, r0, #0x80 ;; Enable port H 
                                                            GPIO 
  105 0000001C 6030            str              r0, [r6]
  106 0000001E         
  107 0000001E BF00            nop
  108 00000020 BF00            nop
  109 00000022 BF00            nop
  110 00000024         
  111 00000024         ;;Pin muxing pour PWM, port D, reg. GPIOPCTL(p444), 4bit
                       s de PCM0=0001<=>PWM (voir p1261)
  112 00000024         ;;il faut mettre 1 pour avoir PD0=PWM0 et PD1=PWM1
  113 00000024 4E55            ldr              r6, = GPIOPCTL_D
  114 00000026         ;ldr r0, [R6]   ;; *(int *)(0x40007000+0x0000052C)=1;
  115 00000026         ;ORR r0, r0, #0x01 ;; Port D, pin 1 = PWM 
  116 00000026 F04F 0001       mov              r0, #0x01
  117 0000002A 6030            str              r0, [r6]
  118 0000002C         
  119 0000002C         ;;MOT2 : Pin muxing pour PWM, port H, reg. GPIOPCTL(p444
                       ), 4bits de PCM0=0001<=>PWM (voir p1261)
  120 0000002C         ;;il faut mettre mux = 2 pour avoir PH0=PWM2 et PH1=PWM3
                       
  121 0000002C 4E54            ldr              r6, = GPIOPCTL_H
  122 0000002E F04F 0002       mov              r0, #0x02
  123 00000032 6030            str              r0, [r6]
  124 00000034         
  125 00000034         ;;Alternate Function Select (p 426), PD0 utilise alernat
                       e fonction (PWM au dessus)
  126 00000034         ;;donc PD0 = 1
  127 00000034 4E53            ldr              r6, = GPIOAFSEL_D
  128 00000036 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  129 00000038 F040 0001       ORR              r0, r0, #0x01 ;
  130 0000003C 6030            str              r0, [r6]
  131 0000003E         



ARM Macro Assembler    Page 5 


  132 0000003E         ;;MOT2 : Alternate Function Select (p 426), PH0 utilise 
                       PWM donc Alternate funct
  133 0000003E         ;;donc PH0 = 1
  134 0000003E 4E52            ldr              r6, = GPIOAFSEL_H
  135 00000040 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  136 00000042 F040 0001       ORR              r0, r0, #0x01 ;
  137 00000046 6030            str              r0, [r6]
  138 00000048         
  139 00000048         ;;-----------PWM0 pour moteur 1 connecté à PD0
  140 00000048         ;;PWM0 produit PWM0 et PWM1 output
  141 00000048         ;;Config Modes PWM0 + mode GenA + mode GenB
  142 00000048 4E50            ldr              r6, = PWM0CTL
  143 0000004A F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  144 0000004E 6030            str              r0, [r6]
  145 00000050         
  146 00000050 4E4F            ldr              r6, =PWM0GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  147 00000052         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  148 00000052 F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  149 00000056 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  150 00000058         
  151 00000058 4E4E            ldr              r6, =PWM0GENB ;en comptage croi
                                                            ssant, qd comparate
                                                            urB = compteur => s
                                                            ortie pwmA=1
  152 0000005A F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  153 0000005E 6030            str              r0, [r6]
  154 00000060         ;Config Compteur, comparateur A et comparateur B
  155 00000060         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  156 00000060         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  157 00000060         ;;on divise par 2 car moteur 6v sur alim 12v
  158 00000060 4E4D            ldr              r6, =PWM0LOAD ;PWM0LOAD=periode
                                                            /2 =0x1F4
  159 00000062 F44F 70FA       mov              r0, #0x1F4
  160 00000066 6030            str              r0,[r6]
  161 00000068         
  162 00000068 4E4C            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  163 0000006A F04F 0050       mov              r0, #VITESSE



ARM Macro Assembler    Page 6 


  164 0000006E 6030            str              r0, [r6]
  165 00000070         
  166 00000070 4E4B            ldr              r6, =PWM0CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (rappo
                                                            rt cyclique depend 
                                                            de CMPA)
  167 00000072 F44F 70FA       mov              r0, #0x1F4
  168 00000076 6030            str              r0, [r6]
  169 00000078         
  170 00000078         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  171 00000078 4E44            ldr              r6, =PWM0CTL
  172 0000007A 6830            ldr              r0, [r6]
  173 0000007C F040 0007       ORR              r0, r0, #0x07
  174 00000080 6030            str              r0, [r6]
  175 00000082         
  176 00000082         ;;-----------PWM2 pour moteur 2 connecté à PH0
  177 00000082         ;;PWM1block produit PWM2 et PWM3 output
  178 00000082         ;;Config Modes PWM2 + mode GenA + mode GenB
  179 00000082 4E48            ldr              r6, = PWM1CTL
  180 00000084 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  181 00000088 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x040)=2;
  182 0000008A         
  183 0000008A 4E47            ldr              r6, =PWM1GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  184 0000008C         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  185 0000008C F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  186 00000090 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  187 00000092         
  188 00000092         ;*(int *)(0x40028000+0x060)=0x0B0; //
  189 00000092 4E46            ldr              r6, =PWM1GENB ;*(int *)(0x40028
                                                            000+0x064)=0x0B00;
  190 00000094 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  191 00000098 6030            str              r0, [r6]    ;en comptage croiss
                                                            ant, qd comparateur
                                                            B = compteur => sor
                                                            tie pwmA=1
  192 0000009A         ;Config Compteur, comparateur A et comparateur B
  193 0000009A         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  194 0000009A         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  195 0000009A         ;;on divise par 2 car moteur 6v sur alim 12v
  196 0000009A         ;*(int *)(0x40028000+0x050)=0x1F4; //PWM0LOAD=periode/2 
                       =0x1F4
  197 0000009A 4E45            ldr              r6, =PWM1LOAD



ARM Macro Assembler    Page 7 


  198 0000009C F44F 70FA       mov              r0, #0x1F4
  199 000000A0 6030            str              r0,[r6]
  200 000000A2         
  201 000000A2 4E44            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  202 000000A4 F04F 0050       mov              r0, #VITESSE
  203 000000A8 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x058)=0x01C2;
  204 000000AA         
  205 000000AA 4E43            ldr              r6, =PWM1CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (CMPA 
                                                            depend du rapport c
                                                            yclique)
  206 000000AC F44F 70FA       mov              r0, #0x1F4  ; *(int *)(0x400280
                                                            00+0x05C)=0x1F4; 
  207 000000B0 6030            str              r0, [r6]
  208 000000B2         
  209 000000B2         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  210 000000B2 4E3C            ldr              r6, =PWM1CTL
  211 000000B4 6830            ldr              r0, [r6]    ;*(int *) (0x400280
                                                            00+0x40)= *(int *)(
                                                            0x40028000+0x40) | 
                                                            0x07;
  212 000000B6 F040 0007       ORR              r0, r0, #0x07
  213 000000BA 6030            str              r0, [r6]
  214 000000BC         
  215 000000BC         ;;-----Fin config des PWMs   
  216 000000BC         
  217 000000BC         ;PORT D OUTPUT pin0 (pwm)=pin1(direction)=pin2(slow deca
                       y)=pin5(12v enable)
  218 000000BC 4E3F            ldr              r6, =GPIODIR_D
  219 000000BE 6830            ldr              r0, [r6]
  220 000000C0 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  221 000000C4 6030            str              r0,[r6]
  222 000000C6         ;Port D, 2mA les meme
  223 000000C6 4E3E            ldr              r6, =GPIODR2R_D ; 
  224 000000C8 6830            ldr              r0, [r6]
  225 000000CA F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  226 000000CE 6030            str              r0,[r6]
  227 000000D0         ;Port D, Digital Enable
  228 000000D0 4E3C            ldr              r6, =GPIODEN_D ;
  229 000000D2 6830            ldr              r0, [r6]
  230 000000D4 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  231 000000D8 6030            str              r0,[r6]
  232 000000DA         ;Port D : mise à 1 de slow Decay et 12V et mise à 0 pour
                        dir et pwm
  233 000000DA 4E3B            ldr              r6, =(GPIODATA_D+((GPIO_0+GPIO_
1+GPIO_2+GPIO_5)<<2))
  234 000000DC F04F 0024       mov              r0, #(GPIO_2+GPIO_5) ; #0x24
  235 000000E0 6030            str              r0,[r6]
  236 000000E2         
  237 000000E2         ;MOT2, PH1 pour sens moteur ouput
  238 000000E2 4E3A            ldr              r6, =GPIODIR_H



ARM Macro Assembler    Page 8 


  239 000000E4 F04F 0003       mov              r0, #0x03   ; 
  240 000000E8 6030            str              r0,[r6]
  241 000000EA         ;Port H, 2mA les meme
  242 000000EA 4E39            ldr              r6, =GPIODR2R_H
  243 000000EC F04F 0003       mov              r0, #0x03
  244 000000F0 6030            str              r0,[r6]
  245 000000F2         ;Port H, Digital Enable
  246 000000F2 4E38            ldr              r6, =GPIODEN_H
  247 000000F4 F04F 0003       mov              r0, #0x03
  248 000000F8 6030            str              r0,[r6]
  249 000000FA         ;Port H : mise à 1 pour dir 
  250 000000FA 4E37            ldr              r6, =(GPIODATA_H +(GPIO_1<<2))
  251 000000FC F04F 0002       mov              r0, #0x02
  252 00000100 6030            str              r0,[r6]
  253 00000102         
  254 00000102 4770            BX               LR          ; FIN du sous progr
                                                            amme d'init.
  255 00000104         
  256 00000104         ;Enable PWM0 (bit 0) et PWM2 (bit 2) p1145 
  257 00000104         ;Attention ici c'est les sorties PWM0 et PWM2
  258 00000104         ;qu'on controle, pas les blocks PWM0 et PWM1!!!
  259 00000104         MOTEUR_DROIT_ON
  260 00000104         ;Enable sortie PWM0 (bit 0), p1145 
  261 00000104 4E35            ldr              r6, =PWMENABLE
  262 00000106 6830            ldr              r0, [r6]
  263 00000108 F040 0001       orr              r0, #0x01   ;bit 0 à 1
  264 0000010C 6030            str              r0, [r6]
  265 0000010E 4770            BX               LR
  266 00000110         
  267 00000110         MOTEUR_DROIT_OFF
  268 00000110 4E32            ldr              r6, =PWMENABLE
  269 00000112 6830            ldr              r0, [r6]
  270 00000114 F000 000E       and              r0, #0x0E   ;bit 0 à 0
  271 00000118 6030            str              r0, [r6]
  272 0000011A 4770            BX               LR
  273 0000011C         
  274 0000011C         MOTEUR_GAUCHE_ON
  275 0000011C 4E2F            ldr              r6, =PWMENABLE
  276 0000011E 6830            ldr              r0, [r6]
  277 00000120 F040 0004       orr              r0, #0x04   ;bit 2 à 1
  278 00000124 6030            str              r0, [r6]
  279 00000126 4770            BX               LR
  280 00000128         
  281 00000128         MOTEUR_GAUCHE_OFF
  282 00000128 4E2C            ldr              r6, =PWMENABLE
  283 0000012A 6830            ldr              r0, [r6]
  284 0000012C F000 000B       and              r0, #0x0B   ;bit 2 à 0
  285 00000130 6030            str              r0, [r6]
  286 00000132 4770            BX               LR
  287 00000134         
  288 00000134         MOTEUR_DROIT_ARRIERE
  289 00000134         ;Inverse Direction (GPIO_D1)
  290 00000134 4E2A            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  291 00000136 F04F 0000       mov              r0, #0
  292 0000013A 6030            str              r0,[r6]
  293 0000013C 4770            BX               LR
  294 0000013E         
  295 0000013E         MOTEUR_DROIT_AVANT
  296 0000013E         ;Inverse Direction (GPIO_D1)



ARM Macro Assembler    Page 9 


  297 0000013E 4E28            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  298 00000140 F04F 0002       mov              r0, #2
  299 00000144 6030            str              r0,[r6]
  300 00000146 4770            BX               LR
  301 00000148         
  302 00000148         MOTEUR_GAUCHE_ARRIERE
  303 00000148         ;Inverse Direction (GPIO_D1)
  304 00000148 4E23            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  305 0000014A F04F 0002       mov              r0, #2      ; contraire du mote
                                                            ur Droit
  306 0000014E 6030            str              r0,[r6]
  307 00000150 4770            BX               LR
  308 00000152         
  309 00000152         MOTEUR_GAUCHE_AVANT
  310 00000152         ;Inverse Direction (GPIO_D1)
  311 00000152 4E21            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  312 00000154 F04F 0000       mov              r0, #0
  313 00000158 6030            str              r0,[r6]
  314 0000015A 4770            BX               LR
  315 0000015C         
  316 0000015C         MOTEUR_DROIT_INVERSE
  317 0000015C         ;Inverse Direction (GPIO_D1)
  318 0000015C 4E20            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  319 0000015E 6831            ldr              r1, [r6]
  320 00000160 F081 0002       EOR              r0, r1, #GPIO_1
  321 00000164 6030            str              r0,[r6]
  322 00000166 4770            BX               LR
  323 00000168         
  324 00000168         MOTEUR_GAUCHE_INVERSE
  325 00000168         ;Inverse Direction (GPIO_D1)
  326 00000168 4E1B            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  327 0000016A 6831            ldr              r1, [r6]
  328 0000016C F081 0002       EOR              r0, r1, #GPIO_1
  329 00000170 6030            str              r0,[r6]
  330 00000172 4770            BX               LR
  331 00000174         
  332 00000174                 END
              400FE100 
              400FE108 
              4000752C 
              4002752C 
              40007420 
              40027420 
              40028040 
              40028060 
              40028064 
              40028050 
              40028058 
              4002805C 
              40028080 
              400280A0 
              400280A4 
              40028090 
              40028098 
              4002809C 
              40007400 
              40007500 
              4000751C 
              4000709C 



ARM Macro Assembler    Page 10 


              40027400 
              40027500 
              4002751C 
              40027008 
              40028008 
              40007008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\stellar.d -o.\objects\stellar.o -I.\RTE\_Target_1 -IC:\U
sers\Ragavi\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Use
rs\Ragavi\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\Device\ARM\ARMCM3\Include --p
redefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION
_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --lis
t=.\listings\stellar.lst stellar.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 68 in file stellar.s
   Uses
      None
Comment: .text unused
MOTEUR_DROIT_ARRIERE 00000134

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 288 in file stellar.s
   Uses
      At line 76 in file stellar.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 0000013E

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 295 in file stellar.s
   Uses
      At line 75 in file stellar.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 0000015C

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 316 in file stellar.s
   Uses
      At line 77 in file stellar.s
Comment: MOTEUR_DROIT_INVERSE used once
MOTEUR_DROIT_OFF 00000110

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 267 in file stellar.s
   Uses
      At line 74 in file stellar.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000104

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 259 in file stellar.s
   Uses
      At line 73 in file stellar.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000148

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 302 in file stellar.s
   Uses
      At line 81 in file stellar.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 00000152

Symbol: MOTEUR_GAUCHE_AVANT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 309 in file stellar.s
   Uses
      At line 80 in file stellar.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000168

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 324 in file stellar.s
   Uses
      At line 82 in file stellar.s
Comment: MOTEUR_GAUCHE_INVERSE used once
MOTEUR_GAUCHE_OFF 00000128

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 281 in file stellar.s
   Uses
      At line 79 in file stellar.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 0000011C

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 274 in file stellar.s
   Uses
      At line 78 in file stellar.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 85 in file stellar.s
   Uses
      At line 72 in file stellar.s
Comment: MOTEUR_INIT used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOAFSEL_D 40007420

Symbol: GPIOAFSEL_D
   Definitions
      At line 33 in file stellar.s
   Uses
      At line 127 in file stellar.s
Comment: GPIOAFSEL_D used once
GPIOAFSEL_H 40027420

Symbol: GPIOAFSEL_H
   Definitions
      At line 41 in file stellar.s
   Uses
      At line 134 in file stellar.s
Comment: GPIOAFSEL_H used once
GPIODATA_D 40007000

Symbol: GPIODATA_D
   Definitions
      At line 28 in file stellar.s
   Uses
      At line 233 in file stellar.s
      At line 290 in file stellar.s
      At line 297 in file stellar.s
      At line 318 in file stellar.s

GPIODATA_H 40027000

Symbol: GPIODATA_H
   Definitions
      At line 36 in file stellar.s
   Uses
      At line 250 in file stellar.s
      At line 304 in file stellar.s
      At line 311 in file stellar.s
      At line 326 in file stellar.s

GPIODEN_D 4000751C

Symbol: GPIODEN_D
   Definitions
      At line 31 in file stellar.s
   Uses
      At line 228 in file stellar.s
Comment: GPIODEN_D used once
GPIODEN_H 4002751C

Symbol: GPIODEN_H
   Definitions
      At line 39 in file stellar.s
   Uses
      At line 246 in file stellar.s
Comment: GPIODEN_H used once
GPIODIR_D 40007400

Symbol: GPIODIR_D
   Definitions
      At line 29 in file stellar.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 218 in file stellar.s
Comment: GPIODIR_D used once
GPIODIR_H 40027400

Symbol: GPIODIR_H
   Definitions
      At line 37 in file stellar.s
   Uses
      At line 238 in file stellar.s
Comment: GPIODIR_H used once
GPIODR2R_D 40007500

Symbol: GPIODR2R_D
   Definitions
      At line 30 in file stellar.s
   Uses
      At line 223 in file stellar.s
Comment: GPIODR2R_D used once
GPIODR2R_H 40027500

Symbol: GPIODR2R_H
   Definitions
      At line 38 in file stellar.s
   Uses
      At line 242 in file stellar.s
Comment: GPIODR2R_H used once
GPIOPCTL_D 4000752C

Symbol: GPIOPCTL_D
   Definitions
      At line 32 in file stellar.s
   Uses
      At line 113 in file stellar.s
Comment: GPIOPCTL_D used once
GPIOPCTL_H 4002752C

Symbol: GPIOPCTL_H
   Definitions
      At line 40 in file stellar.s
   Uses
      At line 121 in file stellar.s
Comment: GPIOPCTL_H used once
GPIO_0 00000001

Symbol: GPIO_0
   Definitions
      At line 17 in file stellar.s
   Uses
      At line 220 in file stellar.s
      At line 225 in file stellar.s
      At line 230 in file stellar.s
      At line 233 in file stellar.s

GPIO_1 00000002

Symbol: GPIO_1
   Definitions
      At line 18 in file stellar.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 220 in file stellar.s
      At line 225 in file stellar.s
      At line 230 in file stellar.s
      At line 233 in file stellar.s
      At line 250 in file stellar.s
      At line 290 in file stellar.s
      At line 297 in file stellar.s
      At line 304 in file stellar.s
      At line 311 in file stellar.s
      At line 318 in file stellar.s
      At line 320 in file stellar.s
      At line 326 in file stellar.s
      At line 328 in file stellar.s

GPIO_2 00000004

Symbol: GPIO_2
   Definitions
      At line 19 in file stellar.s
   Uses
      At line 220 in file stellar.s
      At line 225 in file stellar.s
      At line 230 in file stellar.s
      At line 233 in file stellar.s
      At line 234 in file stellar.s

GPIO_5 00000020

Symbol: GPIO_5
   Definitions
      At line 20 in file stellar.s
   Uses
      At line 220 in file stellar.s
      At line 225 in file stellar.s
      At line 230 in file stellar.s
      At line 233 in file stellar.s
      At line 234 in file stellar.s

PORTD_BASE 40007000

Symbol: PORTD_BASE
   Definitions
      At line 27 in file stellar.s
   Uses
      At line 28 in file stellar.s
      At line 29 in file stellar.s
      At line 30 in file stellar.s
      At line 31 in file stellar.s
      At line 32 in file stellar.s
      At line 33 in file stellar.s

PORTH_BASE 40027000

Symbol: PORTH_BASE
   Definitions
      At line 35 in file stellar.s
   Uses
      At line 36 in file stellar.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 37 in file stellar.s
      At line 38 in file stellar.s
      At line 39 in file stellar.s
      At line 40 in file stellar.s
      At line 41 in file stellar.s

PWM0CMPA 40028058

Symbol: PWM0CMPA
   Definitions
      At line 50 in file stellar.s
   Uses
      At line 162 in file stellar.s
Comment: PWM0CMPA used once
PWM0CMPB 4002805C

Symbol: PWM0CMPB
   Definitions
      At line 51 in file stellar.s
   Uses
      At line 166 in file stellar.s
Comment: PWM0CMPB used once
PWM0CTL 40028040

Symbol: PWM0CTL
   Definitions
      At line 48 in file stellar.s
   Uses
      At line 142 in file stellar.s
      At line 171 in file stellar.s

PWM0GENA 40028060

Symbol: PWM0GENA
   Definitions
      At line 52 in file stellar.s
   Uses
      At line 146 in file stellar.s
Comment: PWM0GENA used once
PWM0GENB 40028064

Symbol: PWM0GENB
   Definitions
      At line 53 in file stellar.s
   Uses
      At line 151 in file stellar.s
Comment: PWM0GENB used once
PWM0LOAD 40028050

Symbol: PWM0LOAD
   Definitions
      At line 49 in file stellar.s
   Uses
      At line 158 in file stellar.s
Comment: PWM0LOAD used once
PWM1CMPA 40028098

Symbol: PWM1CMPA
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 58 in file stellar.s
   Uses
      At line 201 in file stellar.s
Comment: PWM1CMPA used once
PWM1CMPB 4002809C

Symbol: PWM1CMPB
   Definitions
      At line 59 in file stellar.s
   Uses
      At line 205 in file stellar.s
Comment: PWM1CMPB used once
PWM1CTL 40028080

Symbol: PWM1CTL
   Definitions
      At line 56 in file stellar.s
   Uses
      At line 179 in file stellar.s
      At line 210 in file stellar.s

PWM1GENA 400280A0

Symbol: PWM1GENA
   Definitions
      At line 60 in file stellar.s
   Uses
      At line 183 in file stellar.s
Comment: PWM1GENA used once
PWM1GENB 400280A4

Symbol: PWM1GENB
   Definitions
      At line 61 in file stellar.s
   Uses
      At line 189 in file stellar.s
Comment: PWM1GENB used once
PWM1LOAD 40028090

Symbol: PWM1LOAD
   Definitions
      At line 57 in file stellar.s
   Uses
      At line 197 in file stellar.s
Comment: PWM1LOAD used once
PWMENABLE 40028008

Symbol: PWMENABLE
   Definitions
      At line 45 in file stellar.s
   Uses
      At line 261 in file stellar.s
      At line 268 in file stellar.s
      At line 275 in file stellar.s
      At line 282 in file stellar.s

PWM_BASE 40028000

Symbol: PWM_BASE



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 44 in file stellar.s
   Uses
      At line 45 in file stellar.s
      At line 48 in file stellar.s
      At line 49 in file stellar.s
      At line 50 in file stellar.s
      At line 51 in file stellar.s
      At line 52 in file stellar.s
      At line 53 in file stellar.s
      At line 56 in file stellar.s
      At line 57 in file stellar.s
      At line 58 in file stellar.s
      At line 59 in file stellar.s
      At line 60 in file stellar.s
      At line 61 in file stellar.s

SYSCTL_RCGC0 400FE100

Symbol: SYSCTL_RCGC0
   Definitions
      At line 23 in file stellar.s
   Uses
      At line 86 in file stellar.s
Comment: SYSCTL_RCGC0 used once
SYSCTL_RCGC2 400FE108

Symbol: SYSCTL_RCGC2
   Definitions
      At line 24 in file stellar.s
   Uses
      At line 96 in file stellar.s
      At line 102 in file stellar.s

VITESSE 00000050

Symbol: VITESSE
   Definitions
      At line 64 in file stellar.s
   Uses
      At line 163 in file stellar.s
      At line 202 in file stellar.s

35 symbols
384 symbols in table
